library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity pc is 
	Port(
		PC_in: in std_logic_vector(15 downto 0);
		PL: in std_logic;
		PI: in std_logic;
		Clk: in std_logic;
		Reset: in std_logic;
		PC_out: out std_logic_vector(15 downto 0)
	);
end pc;

architecture Behavioral of pc is
	
	begin	
		process(Clk, reset, PL, PI)
			variable pcvar ; std_logic_vector(15 downto 0);
			variable temp: integer;
			variable increment: std_logic_vector(15 downto 0);
			
			begin 
				if(reset='1' and Clk='1') then 
					pcvar := x"0000";
					
				elsif(PL = '1' and Clk= '1') then
					pcvar := pcvar + PC_in;
					
				elsif(PI = '1' and Clk = '1') then 
					temp:= conv_integer(pcvar);
					temp:= temp + conv_integer(1);
					increment := conv_std_logic_vector(temp, 16);
					pcvar := increment;
					
				end if;
				
				PC_out <= pcvar after 10ns;
		
		end process;
		
end Behavioral;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity multiplexer_8to1_1bit is
	Port(
		I0: in std_logic;
		I1: in std_logic;
		I2: in std_logic;
		I3: in std_logic;
		I4: in std_logic;
		I5: in std_logic;
		I6: in std_logic;
		I7: in std_logic;
		src: in std_logic_vector(2 downto 0);
		Z: out std_logic
	);
end multiplexer_8to1_1bit;

architecture Behavioral of multiplexer_8to1_1bit is

	begin 
		Z <= I0 after 5ns when src="000" else
				I1 after 5ns when src="001" else
				I2 after 5ns when src="010" else
				I3 after 5ns when src="011" else
				I4 after 5ns when src="100" else
				I5 after 5ns when src="101" else
				I6 after 5ns when src="110" else
				I7 after 5ns when src="111" else
				'0' after 5ns;
				
end Behavioral;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity multiplexer_2to1_8bit is 
	Port(
		I0 : in std_logic_vector(7 downto 0);
		I1 : in std_logic_vector(7 downto 0);
		S : in std_logic;
		Z : out std_logic_vector(7 downto 0)
	);
end multiplexer_2to1_8bit;

architecture Behavioral of multiplexer_2to1_8bit is

	begin
		Z <= I0 after 1ns when S='0' else
			I1 after 1ns when S= '1' else
			"00000000" after 1ns;
			
end Behavioral;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity IR is 
	Port(
		ir_in: in std_logic_vector(15 downto 0);
		il: in std_logic;
		clk: in std_logic;
		dr: out std_logic_vector(2 downto 0);
		sa: out std_logic_vector(2 downto 0);
		sb: out std_logic_vector(2 downto 0);
		opcode: out std_logic_vector(6 downto 0)
	);
end IR;

architecture Behavioral of IR is

	signal ir_sig: std_logic_vector(15 downto 0);
	
	begin	
		ir_sig <= ir_in after 1ns when il - '1' ekse ir_sig after 1ns;
		
		opcode <= ir_sig(15 downto 9) when clk = '1';
		dr <= ir_sig(8 downto 6) when clk = '1';
		sa <= ir_sig(5 downto 3) when clk = '1';
		sb <= ir_sig(2 downto 0) when clk = '1';
		
end Behavioral;
		
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity extend is
	Port(
		DR_SB: in std_logic(5 downto 0);
		ext: out std_logic_vector(15 downto 0)
	);
end extend;

architecture Behavioral of extend is
	
	signal ext_s : std_logic_vector(15 downto 0);
	
	begin 
		ext_s(5 downto 0) <= DR_SB;
		ext_s(15 downto 6) <= "0000000000" when DR_SB(5) = '0' else "1111111111";
		ext <= ext_s;
		
end Behavioral;
		
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity control_memory is
	Port(
		MM: out std_logic;
		MW: out std_logic;
		RW: out std_logic;
		MD: out std_logic;
		MM: out std_logic_vector(4 downto 0);
		MB: out std_logic;
		TB: out std_logic;
		TA: out std_logic;
		TD: out std_logic;
		PI: out std_logic;
		PL: out std_logic;
		IL: out std_logic;
		MC: out std_logic;
		MS: out std_logic_vector(2 downto 0);
		NA: out std_logic_vector(7 downto 0);
		IN_CAR: out std_logic_vector(7 downto 0);
	);
end control_memory;

architecture Behavioral of control_memory is
	type mem_array is array(0 to 255) of std_logic_vector(27 downto 0);
	begin
			memory_m : process(in_car)
        variable ControlMemory : mem_array := (
        --Module 0
        x"C020304", --0 start of intermediate value in register
        x"C020304", --1 immediate value in register
        x"C020304", --2 immediate value in register
        x"C020304", --3 immediate value in register
        x"C020304", --4 immediate value in register
        x"C020304", --5 immediate value in register
        x"C020304", --6 immediate value in register
        x"C020304", --7 end of immediate value in register
        x"C020224", --8 ADI -> add the immediate operand
        x"C02000C", --9 LDR -> load to register
        x"C020001", --A STR -> store in register
        x"C020014", --B INC -> increment the register's value by 1
        x"C0200E4", --C NOT -> compliment 
        x"C020024", --D ADD -> add values from source and destination
        x"1228002", --E B -> branch unconditionally
        x"0000000", --F
        
        --Module 1
        x"0000000", --0 
        x"0000000", --1 
        x"C020000", --2 
        x"C020024", --3 ADD -> add values from source and destination
        x"169A002", --4 BXX -> branch conditionally to area
        x"C020024", --5 ADD -> add values from source and destination
        x"C020024", --6 ADD -> add values from source and destination
        x"C020024", --7 
        x"0000000", --8 
        x"0000000", --9 
        x"0000000", --A  
        x"0000000", --B 
        x"0000000", --C 
        x"0000000", --D 
        x"0000000", --E 
        x"0000000", --F 
        
        --Module 2
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module 3
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module 4
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module 5
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module 6
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module 7
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module 8
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module 9
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module A
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module B
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module C
        x"C10C002", --0 IF fetching
        x"0030000", --1 Exit signal
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module D
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module E
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000", --F
        
        --Module F
        x"0000000", --0
        x"0000000", --1
        x"0000000", --2
        x"0000000", --3
        x"0000000", --4
        x"0000000", --5
        x"0000000", --6
        x"0000000", --7
        x"0000000", --8
        x"0000000", --9
        x"0000000", --A
        x"0000000", --B
        x"0000000", --C
        x"0000000", --D
        x"0000000", --E
        x"0000000" --F
        );
        
        variable addr : integer;
        variable control_out : STD_LOGIC_VECTOR(27 downto 0);
		
		begin
			addr : conv_integer(in_car);
			control_out : ControlMemory(addr);
			MW <= control_out(0);
			MM <= control_out(1);
			RW <= control_out(2);
			MD <= control_out(3);
			FS <= control_out(8 downto 4);
			MB <= control_out(9);
			
			TB <= control_out(10);
			TA <= control_out(11);
			TD <= control_out(12);
			PL <= control_out(13);
			PI <= control_out(14);
			IL <= control_out(15);
			MC <= control_out(16);
			
			MS <= control_out(19 downto 17);
			NA <= control_out(27 downto 20);
		end process;
		
end Behavioral;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity car is 
	Port(
		car_in: in std_logic_vector(7 downto 0);
		s: in std_logic;
		reset: in std_logic;
		car_out: out std_logic_vector(7 downto 0)
	);
end car;

architecture Behavioral of car is 
	begin
		
		process(reset, car_in)
			variable current : std_logic_vector(7 downto 0);
			variable temp : integer;
			variable increment : std_logic_vector(7 downto 0);
			
			begin
				if(reset = '1') then current := x"c0";
				elsif(s = '1') then current := car_in;
				elsif(s = '0') then
					temp := conv_integer(current);
					increment:= conv_std_logic_vector(temp, 8);
					current := increment;
				end if;
				
				car_out <= current;
				
		end process;
		
end Behavioral;
				
